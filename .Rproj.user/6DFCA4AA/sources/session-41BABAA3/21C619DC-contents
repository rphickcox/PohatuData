# ---
# title: "Pohatu Penguins Monitoring Dashboard"
# author: "Rachel Hickcox"
# date: "2022"
# email: "rphickcox@gmail.com"
# ---

# list.of.packages <- c("shiny", 
#                       "shinydashboard",
#                       "googlesheets4", 
#                       "tidyverse",
#                       "data.table",
#                       "flextable",
#                       "graphics",
#                       "ggplot2",
#                       "googledrive",
#                       "readxl",
#                       "lubridate",
#                       "leaflet",
#                       "leaflet.esri", 
#                       "fresh")
# new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
# if(length(new.packages)) install.packages(new.packages)

library(shiny)
library(shinydashboard)
library(googlesheets4)
library(data.table)
library(flextable)
library(ggplot2)
library(graphics)
library(googledrive)
library(readxl)
library(lubridate)
library(dplyr)
library(leaflet)
library(leaflet.esri)
library(tidyr)
library(stringr)
library(fresh)
#library(bs4Dash) # possible to change from shinydashboard to bs4dash; comment out shinydashboard above

# Connecting to Google Drive
options(
  # whenever there is one account token found, use the cached token
  gargle_oauth_email = TRUE,
  # specify auth tokens should be stored in a hidden directory ".secrets"
  gargle_oauth_cache = ".secrets", 
  gargle_oob_default = TRUE
)
drive_auth()

drive_download(file = "https://docs.google.com/spreadsheets/d/1AKbYixeUF_LM8SEknA49wvnERDVeZFWEIAilM75m0nw", overwrite = TRUE, 
               path = "data/Monitoring.xlsx")
monitor <- read_excel("data/Monitoring.xlsx")

drive_download(file = "https://docs.google.com/spreadsheets/d/1qh6zAXgVokfdx4WjjSls8qh4tAfEOL-bO3xg3CvRY44", overwrite = TRUE,
               path = "data/Nest ID.xlsx")
nestid <- read_excel("data/Nest ID.xlsx")

drive_download(file = "https://docs.google.com/spreadsheets/d/16c4c5nXbz_PFf7iyN2DG7fExsi4P5uP-NSYAbCDX1rc", overwrite = TRUE, 
               path = "data/Bird ID.xlsx")
birdid <- read_excel("data/Bird ID.xlsx")

# Dates
n <- length(unique(monitor$`Nest ID`))
tdt <- floor_date(today(), "weeks", week_start = 1)
tdt_d <- format(tdt, "%d-%m-%Y")
tdt_s <- as.numeric(str_replace_all(as.character(tdt), pattern = "-", ""))
start <- floor_date(as.Date(paste0("01-08-", format(today(), "%Y")), "%d-%m-%Y"), "weeks", week_start = 1)
dates_df <- seq(start, today(), 7)

# Days since last monitoring- over 1 week ago
mdf <- monitor %>%
  group_by(`Nest ID`) %>%
  filter(max(DateTime) < tdt - 7) %>%
  group_by(`Nest ID`) %>%
  summarise("Last_Visit_wk" = as.Date(floor_date(max(DateTime), "weeks", week_start = 1))) %>%
  mutate(Weeks_Since = (tdt-Last_Visit_wk)/7) %>%
  arrange(Last_Visit_wk)

################################################################################
# Function to get weekly stats
rm(list = c("allstats", "allmarked", "birdsmarked", "total_marked_pp", "total_marked_day", "total_marked"))
weeklystats <- function(monitor, nestid, birdid, date.i){
  
  nests <- monitor %>%
    group_by(`Nest ID`) %>%
    arrange(`Nest ID`, DateTime) %>%
    mutate(n = row_number()) %>%
    mutate(n1 = ifelse(`Nest activity` == "Eggs/Chicks present", n, NA)) %>%
    filter(n >= min(n1, na.rm = TRUE)-1) %>%
    mutate(Date_last = lag(DateTime), .before = DateTime) %>%
    filter(`Nest activity` == "Eggs/Chicks present" | `Nest activity` == "FAILED") %>%
    mutate(EstDate_lay = as.Date(min(DateTime, na.rm = TRUE)), .after = 2) %>%
    select(-c(n, n1)) %>%
    mutate(Date_last = difftime(as.Date(DateTime), as.Date(Date_last), units = "days")) %>%
    mutate(.after = DateTime,
           DateTime = as.Date(DateTime), 
           EstDate_chicks = EstDate_lay + 35, #incubation length
           EstDate_transpond = EstDate_chicks + 42, #7 days * 6 weeks
           EstDate_fledge = EstDate_chicks + 56) %>% #fledge 
    ungroup() %>%
    mutate(Eggs = ifelse(is.na(Eggs), 0, Eggs), 
           Chicks = ifelse(is.na(Chicks), 0, Chicks), 
           Status = ifelse(Eggs > 0, "Eggs", "Chicks"),
           Status = ifelse(Chicks == 0 & Eggs == 0, "Unknown", Status), .before = 1)
  
  # Number monitored boxes
  nestbox <-  filter(monitor, as.Date(DateTime) >= date.i & as.Date(DateTime) < date.i + 7)
  nestbox <- nrow(nestbox)
  
  # Failed
  failed_nests <- nests %>%
    filter(`Nest activity` == "FAILED") %>%
    select(`Nest ID`, `Nest activity`, DateTime)
  failed <- nrow(failed_nests)
  
  nests <- nests %>% 
    mutate(Status = ifelse(`Nest ID` %in% failed_nests$`Nest ID`, "Failed", Status))
  
  nests_filter <- filter(nests, DateTime >= date.i & DateTime < date.i + 7)
  
  if(nrow(nests_filter) == 0){ 
    stats_weekly <- data.frame("week" = date.i, 
                               "total_eggs"  = 0,   
                               "total_chicks" = 0,   
                               "n_nests" = 0,
                               "failed" = 0,       
                               "nest_monitored" = nestbox,
                               "first_lay" = "1900-01-01",
                               "first_chicks" = "1900-01-01") # if there are no nests
    birdid_total <- data.frame("Date" = as.character(date.i), 
                               "NestID"  = "NA",   
                               "Number_Marked" = 0,   
                               "Status" = "NA")
    total_marked_pp <- data.frame("Metric" = "NA", "Total" = "NA", "group" = "NA") 
  } else {
    # Getting coordinates for each nest
    nestid_coord <- nestid %>%
      tidyr::separate(Location, into = c("Lat", "Long"), ",") %>%
      select(`Nest ID`, Lat, Long) %>%
      mutate(Lat = as.numeric(Lat), Long = as.numeric(Long))
    write.csv(nestid_coord, "data/NestID_coordinates.csv", row.names = FALSE)
    
    nests <- nests %>%
      left_join(nestid_coord, by = "Nest ID")
    
    # First lay date
    first_lay <- min(nests$EstDate_lay) # date of first eggs
    
    # First chicks date
    first_cx <- filter(nests_filter, Chicks > 0)
    if(nrow(first_cx) > 0){
      first_cx <- min(first_cx$DateTime, na.rm = TRUE)
    } else {
      first_cx <- "1900-01-01"}
    
    # Summary this week
    stats_weekly <- nests_filter %>%
      filter(`Nest activity` != "FAILED") %>%
      summarise(week = as.character(date.i), 
                total_eggs = sum(as.numeric(Eggs), na.rm = TRUE), 
                total_chicks = sum(as.numeric(Chicks), na.rm = TRUE),
                n_nests = n()) %>%
      mutate(week = as.character(week), 
             failed = failed, 
             nest_monitored = nestbox,
             first_lay = as.character(as.Date(first_lay)), 
             first_chicks = as.character(as.Date(first_cx)))
    
    ###########################
    # Transponder stats
    temp <- nests_filter %>% 
      select(DateTime, Status, 'Nest ID') %>% 
      mutate(DateTime = as.character(DateTime))
    
    birdid_filter <- birdid %>% 
      filter(as.Date(DateTime_marking) >= date.i & as.Date(DateTime_marking) < date.i + 7) %>% 
      mutate(DateTime_marking = as.character(as.Date(DateTime_marking)))
    
    if(nrow(birdid_filter) == 0){ # if there are no marked birds
      birdid_total <- data.frame("Date" = as.character(date.i), 
                                 "NestID"  = "NA",   
                                 "Number_Marked" = 0,   
                                 "Status" = "NA")
      total_marked_pp <- data.frame("Metric" = "NA", "Total" = "NA", "group" = "NA") 
    } else { 
      birdid_total <- birdid_filter %>% 
        select('DateTime_marking', 'Nest ID_marking', 'Bird ID') %>%
        arrange('Nest ID_marking') %>%
        left_join(temp, by = c("Nest ID_marking" = "Nest ID", "DateTime_marking" = "DateTime")) %>%
        mutate(Status = ifelse(is.na(Status), "Loafing", Status)) %>%
        rename("Date" = "DateTime_marking", "NestID" = "Nest ID_marking") %>%
        group_by(Date, NestID) %>% 
        distinct() %>% 
        summarise("Number_Marked" = n(), 
                  "Status" = unique(Status))
      
      total_marked_day <- birdid_filter %>% 
        rename("Metric" = "DateTime_marking") %>%
        group_by(Metric) %>% 
        summarise(Total = n()) %>% 
        mutate(group = "Date")
      
      total_marked_pp <- birdid_filter %>% 
        rename("Metric" = "Tagger") %>%
        group_by(Metric) %>% 
        summarise(Total = n()) %>% 
        mutate(group = "Person") %>%
        bind_rows(total_marked_day)
    }
  }
  assign("total_marked", total_marked_pp, envir = .GlobalEnv)
  assign("all_marked", birdid_total, envir = .GlobalEnv)
  return(stats_weekly)
} #end of function

###############################################################################

# RUNNING FUNCTION
for(i in 1:length(dates_df)){
  y <- dates_df[i]
  x <- weeklystats(monitor, nestid, birdid, date.i = y)
  allstats <- rbind(if(exists("allstats")) allstats, x)
  birdsmarked <- rbind(if(exists("birdsmarked")) birdsmarked, total_marked)
  allmarked <- rbind(if(exists("allmarked")) allmarked, all_marked)
}

# Appending this weeks data
allstats <- allstats %>%
  mutate(first_lay = str_replace_all(first_lay, "1900-01-01", max(first_lay, na.rm = TRUE))) %>%
  mutate(first_lay = str_replace_all(first_lay, "1900-01-01", "NA")) %>% 
  mutate(first_chicks = str_replace_all(first_chicks, "1900-01-01", max(first_chicks, na.rm = TRUE))) %>%
  mutate(first_chicks = str_replace_all(first_chicks, "1900-01-01", "NA")) %>%
  distinct() %>%
  mutate_all(as.character) %>%
  filter(nchar(week) == 10) 

allmarked <- allmarked %>% filter(NestID != "NA") %>% 
  distinct() %>%
  group_by(NestID) %>%
  summarise(Number_Marked = sum(Number_Marked, na.rm = TRUE), 
            Status = list(unique(Status))) %>%
  mutate(Status = ifelse(str_detect(Status, pattern = "Eggs|Chicks"), "Breeding", "Not breeding")) %>% 
  arrange(Number_Marked, NestID)

bydate <- birdsmarked %>% 
  mutate(Total = as.numeric(Total)) %>% 
  filter(group == "Date", Metric != "NA") %>%
  group_by(Metric) %>%
  summarise(Total = sum(Total, na.rm = TRUE)) %>% 
  arrange(Metric) %>%
  mutate(Total = as.character(Total))
bydate <- rbind(c("Date", "Date"), bydate)

byperson <- birdsmarked %>% 
  mutate(Total = as.numeric(Total)) %>% 
  filter(group == "Person", Metric != "NA") %>%
  group_by(Metric) %>%
  summarise(Total = sum(Total, na.rm = TRUE)) %>% 
  arrange(desc(Total)) %>% 
  mutate(Total = as.character(Total))
byperson <- rbind(c("Person", "Person"), byperson)

birdsmarked <- rbind(bydate, byperson, c("Total", as.character(sum(allmarked$Number_Marked))))
write.csv(allstats, "data/Allstats.csv", row.names = FALSE)

# For mapping
nestid_coord <- read.csv("data/NestID_coordinates.csv")
monitor_filter <- monitor %>% 
  group_by(`Nest ID`) %>%
  filter(DateTime == max(DateTime, na.rm = TRUE)) %>%
  select(DateTime,`Nest activity`, `Number of adults`, Eggs, Chicks) 
datmap <- nestid_coord %>%
  left_join(monitor_filter, by = c('Nest.ID' = "Nest ID")) %>% 
  filter(!is.na(Lat), !is.na(Long), !is.na(DateTime)) %>% 
  mutate(DateTime = format(DateTime, "%d/%m/%y")) %>% 
  mutate(across(where(is.character), ~replace_na(., "0"))) %>% 
  mutate(`Nest activity` = ifelse(is.na(`Nest activity`) | str_detect(`Nest.ID`, "DUD"), 
                                  "Defunct/Not monitored", `Nest activity`), 
         `Nest activity` = ifelse(`Nest activity` == "Loafing adult(s)", "Non-breeding", `Nest activity`), 
         `Nest activity` = ifelse(Eggs != 0, "Eggs", `Nest activity`), 
         `Nest activity` = ifelse(Chicks != 0, "Chicks", `Nest activity`)) %>%
  mutate(`Nest activity` = factor(`Nest activity`, levels = c("Eggs", "Chicks", "Non-breeding", "Empty", "FAILED")))

